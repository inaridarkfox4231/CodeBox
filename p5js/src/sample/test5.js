function setup() {
  createCanvas(600, 600, WEBGL);
  pixelDensity(1.25); // これで750になるはず → なりました！
  background(0,128,255);
  console.log(width,height);
  const gl = this._renderer.GL;
  console.log(gl.drawingBufferWidth, gl.drawingBufferHeight);

  console.log("----------------------------------------------");
  const gr = createGraphics(300, 300, WEBGL);
  // pixelDensity()はすべてに影響する
  // こっちも750になったな？
  console.log("----------------------------------------------");
  const gr2 = createGraphics(300, 300, WEBGL);
  // 特に問題なさそうだ。最初からc.widthとc.heightを決めちゃえばいいんだわ。なるほど～

  gr2.background(0);
  image(gr2, -300, -300); // ちゃんと左上
  gr.background(99);
  image(gr, 0, 0); // ちゃんと右下

  // これが6000,6000のとき5760,5760ですね。どういうことなんだろうね。
  // ネイティブの方見てきました。6000x6000だときちんと↑これが6000x6000になりますね。やはりp5.jsが原因か...

  //save("test10");
  // 5758, 5763でテストしたところ、
  // 5757, 5762になりました。どういうこと...
  // 2Dでは普通に5758, 5763ですね。やはりwebglだけおかしな挙動のようです。なぜ～
  // 5750, 5770ではそのまま
  // 5770, 5770ではどちらも5760に切り詰められるようですね。
  // 2Dでは5770x5770ですね～おかしいなどうなってるのこれ

  // webglでやると「名前を付けて画像を保存」でも5760x5760に切り詰められますね。ということはp5.js関係ないですね。
  // 関係ないです。これ以上は調べる気がしないので、パス！

  // なるほど
  // webglだと5760x5760になるね
  // デフォルトフレームバッファが小さくなってるか？問い合わせよろしく
  // console.logでは5761,5761ですね～セーブするときに問題が発生してるっぽい
  // webglのsaveが問題なんでしょうね
}

// 例の箇所いじったら
// ちゃんと6000x6000になりましたね。
// 原因が不明ですが...
// issue投げてみますか。最終的にc.widthとc.heightはw,hになるようですから、
// あ、だめだ。
// createGraphicsで作った6000x6000は切り詰められちゃう。ここいじるのは、だめだ。
// んー...
