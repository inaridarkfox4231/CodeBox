// あっちの方の内部データ。
// 数値はここから拝借してるっぽいね。

function Walker() {
  this.ctx; // Canvas context (used for drawing on)
  this.walker_object = 0; // あ、ここで決めてるのか。
  // まあでもここいじったとしてもあそこコメントアウトされてるからなぁ...
  //walker_gender_stddev = 3.738958238502902;  DEPRECATED
  this.walker_size = 5;
  //this.pixelsperdegree = 37;  //Steve's screen at 1920x1200, 57 cm distance
  this.pixelsperdegree = 37;

  this.translation = false;
  this.translation_start = -1000;
  this.translation_end = 1000;
  this.translation_pos = 0;

  this.data_offset_x = 0;
  this.data_offset_y = 0;
  this.data_offset_z = 0;

  //graphical stuff
  this.offsetx = 0;
  this.offsety = 0;
  this.left = 0;
  this.right = 0;
  this.top = 0;
  this.bottom = 0;
  this.spinmatrix = newIdentMatrix();
  this.walker_colour = "#000";
  this.sticks_force_visible = false;
  this.dotsize = 4;

  this.motion_vertical_scale = 1;
  this.motion_horizontal_scale = 1;
  this.structure_vertical_scale = 1;
  this.structure_horizontal_scale = 1;

  this.dotShapes = [];
  this.linesdrawn= false;

  //THE WALKER
  this.meanwalker = new Array(4);

  this.meanwalker[0] = new Array(-10.7519383725583,-3.72746649802272,-18.3050123531154,-66.5092656924826,44.8271001296432,-14.6283590662005,-63.9261944026256,44.4955713660308,17.7610082741684,14.8045702478553,73.5852924266576,-52.6092814670202,16.9279911020442,75.8694123806675,-52.2857541612207,1.83503092143473,-0.0408307103281587,185.260097750624,220.452431203790,247.761854503159,-182.380575731849,-220.504921772993,-254.264874087117,1.84213422373608,93.4493080518053,73.1623397228417,51.0585903977721,-95.5465213272803,-72.2735735191531,-50.8385897640440,1640.61993723311,1366.67429935860,1406.03752081420,1134.40001920081,915.020745420196,1398.60467189550,1126.90461490174,899.874564579716,1015.02954810020,909.479240979634,525.779863807952,162.948678924057,909.554606761157,522.437972993516,161.727067367829,126.030870377155,-0.0315544948047336,-0.118701655307762,6.00686085567414,18.4233024039577,33.5402189783349,-6.01690993754034,-18.8832547729091,-36.7975908594871,-0.0937279939276836,0.468118059549410,-67.4614091777266,0.421107914862955,-1.24356066032149,66.0585511429529,0.423843495947531,16.7454749227664,13.6539217228521,14.5328751990934,18.7684573831191,13.6120183606257,14.3794935810322,17.6473826923604,10.8915579934451,11.0805683180636,12.7224783591702,-11.5255842263810,-16.8175587375484,12.6801395392263,-11.7514249632538,-16.8625185030921,-0.0446931795675262,-0.0994293926479853,-2.80095151625035,-3.99082840265898,3.68865492657125,2.69286376701449,4.24995528984191,-4.12592626632419,0.116797634556315,6.01637991257057,-0.817529371807220,-55.0021187141497,-6.09574201685782,1.48125881756367,54.8242813403220,1.00000000000000,1.15999007013834,1.26078835523055,-9.76712732911090,-86.5511566058319,-199.180933521128,11.4309821966342,76.7144525104764,176.861540867166,1.62204493236424,8.60677823198452,147.526402445238,323.144939918744,-6.43273887090837,-147.891231503835,-321.784267330297,5.16274050080685,-0.398924078714643,0.882958953137815,-24.4360030065937,-7.11745613579471,0.481319700750004,-21.0133378152143,1.77223262085729,-4.87628414766496,-0.633132212672480,-5.35374117803311,3.18640496961934,-0.136085894756350,-5.55010720754465,3.03219992822588,0.377783128968927,0.523533762551166,-5.32786804552820,6.58549384575466,-52.0673097103806,4.73174986791646,-4.23105153891354,44.5907633662091,0.407880510831181,2.39120923728384,21.1255826430030,-38.2148554176900,-1.93766107878406,-20.9721213831963,39.0862916731996,11.3013841635330,5.04640285684089,9.71946135141663,9.25626338717648,3.64729362215822,0.0700719429418479,9.17415638022784,4.76155544730385,0.102858838066234,14.0190823730271,14.2286897104068,24.4423479977219,-51.2163900094269,14.1930646962749,23.7375872303515,-51.2265471911567,-0.0265949366786581,0.0957151351921562,0.506135566846348,-2.02561787621297,-0.423397734385468,-0.313174726163348,2.24979258910326,-0.0895739290407124,0.0926628592474168,0.177416583858108,3.62804769914316,1.78888648476427,-0.0788364487021580,-3.19918146696128,-1.21382605488544,-2.71924845380677,-3.00211552243835,-3.46227500731415,-5.26659510583453,-11.3157159876224,-3.57804177664794,-5.56430046666801,-12.2629740938751,-3.36532602257169,-4.29417223471535,-13.5520258267399,29.3832084459500,-4.13017568253990,-13.1585043782278,29.6272299664470,0,-0.777824905615585,0.182070540329547,-0.278404491253913,-1.35785980306747,-3.24726391201266,-0.255471828513151,-1.53725883755556,-1.42943693534243,0.308319043161399,-0.532155748157143,-32.1122567706563,10.3292802194032,-0.757355235478753,-31.7039678396603,9.75722739516707,0.239342886057222,0.163386401005694,-0.401825656431265,-1.47644247178224,-3.50005944216109,0.528436071183135,0.544743848609864,2.94088431372796,-0.0276764628803989,-0.475230047571613,-5.61931807680189,-2.53154309467233,0.828885510797054,5.17935392270239,2.78710739229904,-20.8947287998807,-20.8939662029067,-20.3444569419913,-12.9698826053941,6.30000946494167,-20.5875476344584,-14.9628168085916,1.15301838637891,-20.8148027436241,-19.2140457117746,-12.5655072751523,-12.3469483614373,-19.5073676186566,-12.3840671623013,-11.9400529481596,0);
  //new Array(1.726 , 2.005 , -94.530 , -60.218 , -215.354 , -178.508 , -224.202 , -88.733 , 99.665 , 56.943 , 217.556 , 178.477 , 224.215 , -0.549 , 84.935 , 21.781 , 8.999 , -5.082 , -59.490 , 44.959 , -18.623 , -75.620 , 89.449 , -3.941 , -58.375 , 51.061 , -7.152 , -74.107 , -12.411 , 91.005 , 1528.710 , 985.683 , 891.514 , 149.834 , 877.506 , 1366.224 , 1094.033 , 491.494 , 892.284 , 150.152 , 869.144 , 1358.911 , 1088.976 , 1338.648 , 486.922 , 151.917 , -7.834 , -8.728 , -10.485 , 8.823 , -6.398 , -11.529 , -29.581 , 3.141 , -10.471 , 7.963 , -1.749 , -10.822 , -26.338 , -11.434 , 2.714 , -1.204 , -1.204 , -0.610 , -224.377 , 130.364 , 15.316 , 76.716 , -135.130 , -1.592 , 223.096 , -111.221 , -17.185 , -66.873 , -0.893 , 135.672 , 0.125 , 0.111 , 2.010 , 2.522 , 24.437 , 1.910 , -7.495 , -27.132 , -1.817 , -1.820 , -19.912 , -1.758 , 7.271 , 0.101 , 26.942 , 1.000 , -18.000 , -10.452 , -13.867 , 11.957 , -16.807 , -16.822 , -15.854 , 7.390 , -13.815 , 12.199 , -14.376 , -16.489 , -15.652 , -16.336 , 8.316 , -0.106 , 0.254 , 3.735 , 106.567 , 2.763 , 2.078 , 3.912 , 6.409 , -2.962 , -105.080 , -5.609 , -2.554 , -5.643 , -0.201 , -6.388 , -0.149 , -0.062 , 3.053 , -60.341 , -2.756 , -2.889 , -2.703 , -0.598 , -3.218 , 60.146 , 2.519 , 2.494 , 2.987 , -0.156 , 0.209 , 0.000 , 0.046 , 0.033 , 0.055 , -0.635 , -3.920 , 0.290 , -3.754 , -1.561 , 0.004 , 0.501 , 2.669 , 0.047 , 3.451 , 0.174 , 1.499 , -2.588 , -8.995 , -8.631 , 24.202 , 3.746 , -4.648 , -0.393 , 15.827 , -8.544 , 22.933 , 4.141 , -4.423 , -0.441 , -4.807 , 15.536 , 10.376 , 10.363 , 10.352 , -1.143 , 10.841 , 10.963 , 10.178 , 13.693 , 10.328 , -0.244 , 12.358 , 10.996 , 10.423 , 10.705 , 13.584 , 0.000 , 0.077 , -0.060 , -0.111 , -2.006 , -4.330 , -0.392 , -1.071 , -4.761 , -0.182 , 1.447 , 3.448 , 0.352 , 0.268 , -0.022 , 4.766 , 4.100 , 11.302 , 12.601 , -40.721 , -1.334 , 5.840 , 2.062 , 24.543 , 12.606 , -38.794 , -0.624 , 5.376 , 2.142 , 5.993 , 24.622 , 5.895 , 6.029 , 5.942 , 31.323 , -6.916 , 5.265 , 1.709 , -1.390 , 5.809 , 30.685 , -4.154 , 5.579 , 2.859 , 5.664 , -1.871 , 0.000);

  //CAT
  //meanwalker[1] = new Array(267.556, 263.007, 236.843, 285.999, 270.438, 81.342, 66.526, 115.695, 92.808, 356.992, 197.715, 8.959, 267.556, 263.007, 236.843, 81.342, 66.526, 115.695, 0.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, -302.029, -286.731, -230.495, -182.329, -151.317, -301.606, -254.734, -222.982, -148.529, -209.737, -147.599, -139.610, -302.029, -286.731, -230.495, -301.606, -254.734, -222.982, 70.857, 22.689, 7.547, 8.046, 2.845, 3.135, -33.592, -25.853, -17.601, -1.558, 0.714, 2.456, -0.235, -22.689, -7.547, -8.046, 33.592, 25.853, 17.601, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, -3.413, -4.884, -2.216, 4.898, 5.943, -6.651, -2.041, -2.663, 0.849, -1.312, 1.877, 4.495, 3.413, 4.884, 2.216, 6.651, 2.041, 2.663, 10.000, 80.946, 73.030, 32.385, 8.504, 0.598, 75.381, 44.785, 26.443, 0.168, -1.295, -0.564, -0.877, -80.946, -73.030, -32.385, -75.381, -44.785, -26.443, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.859, -1.711, -13.161, 3.015, 0.926, -2.000, -14.766, -0.345, 1.165, 0.045, 0.287, -0.131, -0.859, 1.711, 13.161, 2.000, 14.766, 0.345, 0.000, -21.478, -16.859, 0.445, 2.550, 3.536, -14.571, -8.079, -0.346, 3.344, 1.847, 3.655, 2.393, -21.478, -16.859, 0.445, -14.571, -8.079, -0.346, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, -0.833, -3.858, -2.506, -5.752, -4.966, 1.416, 7.193, -1.683, 3.183, -6.335, -4.296, -2.479, -0.833, -3.858, -2.506, 1.416, 7.193, -1.683, 0.000, 11.453, 3.750, 7.972, 0.411, -0.879, -13.512, -4.831, -6.610, -0.980, 0.530, -0.472, 0.296, 11.453, 3.750, 7.972, -13.512, -4.831, -6.610, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, -1.338, -0.565, -1.681, -2.684, -2.563, -2.135, -3.581, -0.781, -3.581, 2.570, -0.821, -1.336, -1.338, -0.565, -1.681, -2.135, -3.581, -0.781, 0.000);
  this.meanwalker[1] = new Array(89.06,84.511,58.347,107.5,91.942,-97.154,-111.97,-62.801,-85.688,178.5,19.219,-169.54,89.06,84.511,58.347,-97.154,-111.97,-62.801,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-151.01,-135.72,-79.481,-31.315,-0.3025,-150.59,-103.72,-71.968,2.4855,-58.722,3.4155,11.404,-151.01,-135.72,-79.481,-150.59,-103.72,-71.968,70.857,22.689,7.547,8.046,2.845,3.135,-33.592,-25.853,-17.601,-1.558,0.714,2.456,-0.235,-22.689,-7.547,-8.046,33.592,25.853,17.601,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-3.413,-4.884,-2.216,4.898,5.943,-6.651,-2.041,-2.663,0.849,-1.312,1.877,4.495,3.413,4.884,2.216,6.651,2.041,2.663,10,80.946,73.03,32.385,8.504,0.598,75.381,44.785,26.443,0.168,-1.295,-0.564,-0.877,-80.946,-73.03,-32.385,-75.381,-44.785,-26.443,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.859,-1.711,-13.161,3.015,0.926,-2,-14.766,-0.345,1.165,0.045,0.287,-0.131,-0.859,1.711,13.161,2,14.766,0.345,0,-21.478,-16.859,0.445,2.55,3.536,-14.571,-8.079,-0.346,3.344,1.847,3.655,2.393,-21.478,-16.859,0.445,-14.571,-8.079,-0.346,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.833,-3.858,-2.506,-5.752,-4.966,1.416,7.193,-1.683,3.183,-6.335,-4.296,-2.479,-0.833,-3.858,-2.506,1.416,7.193,-1.683,0,11.453,3.75,7.972,0.411,-0.879,-13.512,-4.831,-6.61,-0.98,0.53,-0.472,0.296,11.453,3.75,7.972,-13.512,-4.831,-6.61,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.338,-0.565,-1.681,-2.684,-2.563,-2.135,-3.581,-0.781,-3.581,2.57,-0.821,-1.336,-1.338,-0.565,-1.681,-2.135,-3.581,-0.781,0);

  //PIGEON
  this.meanwalker[2] = new Array(151.657, 115.513, 115.086, -88.932, -86.731, -96.055, -133.994, 35.441, -31.254, 20.839, -38.143, 7.032, -14.763, 25.090, -7.464, 19.885, -0.817, -8.057, -34.126, -26.043, 30.752, 17.119, 630.364, 640.531, 632.458, 503.034, 500.521, 413.254, 386.095, 201.538, 207.795, 203.200, 212.428, 76.605, 1.492, -0.250, 0.884, -2.951, -2.031, -2.721, -3.035, -13.878, -3.316, 6.666, -2.975, 11.736, 12.495, 13.266, 30.328, 29.865, 22.389, 21.325, 0.187, -2.308, -1.926, -2.688, -6.074, -4.869, -5.643, 0.033, -2.564, -0.709, 0.186, 15.934, 23.516, -19.227, -27.160, 7.000, -9.244, -9.560, -8.903, -10.146, -3.777, -6.760, -7.923, -85.578, -81.723, 83.983, 78.686, -4.506, -4.109, -4.019, 26.619, 26.032, 23.463, 30.543, 8.056, 12.008, -4.475, -3.718, 2.695, 2.125, 2.364, -0.841, -1.929, -1.361, -1.599, -5.546, 4.879, 6.195, -8.376, 0.000, 17.762, 17.735, 17.988, 4.712, 4.973, 3.588, 3.269, -37.828, -35.062, -32.137, -28.162, -3.754, -3.432, -3.292, 3.336, 3.396, 2.936, 3.579, 3.051, 4.664, 0.794, -0.237, 0.341, 0.317, 0.439, 2.164, 1.998, 2.146, 2.515, -8.291, 5.109, -9.628, 4.401, 0.000, -27.856, -28.388, -27.729, 3.179, 3.154, 3.018, 3.191, 4.862, -0.595, 6.625, 3.260, 1.780, 2.198, 2.305, -0.528, -0.863, -0.495, -0.660, 0.514, 6.330, 0.775, -5.592, 1.852, 1.557, 1.186, -3.337, -3.079, -3.304, -3.315, -10.877, -13.295, -11.179, -12.343, 0.000);

  //BOX
  this.meanwalker[3] = new Array(-200,200,200,-200,-200,200,200,-200,-200,-200,200,200,-200,-200,200,200,200,200,200,200,-200,-200,-200,-200,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);

  //other walker specific arrays
  //genderaxis = new Array(-1.761 , 3.101 , 15.554 , -10.890 , 0.140 , -11.879 , -53.728 , -7.792 , -7.286 , 12.263 , 6.722 , 6.259 , 42.381 , -1.987 , 16.096 , 9.313 , -8.788 , -23.958 , -9.823 , 4.593 , 14.493 , 14.567 , -9.453 , -25.881 , -13.347 , 9.539 , 16.845 , 17.577 , 11.485 , -5.951 , -6.514 , -15.535 , -16.653 , -0.567 , 3.603 , -10.439 , 19.717 , 0.656 , -14.694 , -1.573 , 5.143 , -6.725 , 20.406 , -2.512 , -0.952 , -1.661 , -4.374 , -2.028 , 1.072 , -3.339 , 1.674 , -3.027 , 4.505 , -0.276 , 0.863 , 3.869 , 0.366 , -2.633 , 4.221 , -2.766 , 6.381 , -2.748 , -0.594 , -0.422 , -1.917 , 41.063 , -0.035 , 23.356 , 15.194 , -1.044 , -2.209 , -11.437 , -2.629 , -3.133 , -1.487 , -17.967 , 0.682 , 0.421 , -2.718 , -0.425 , 9.086 , -2.025 , -4.643 , -2.916 , 3.802 , 0.351 , -3.585 , 2.615 , 3.073 , 0.354 , 6.239 , 0.000 , -16.618 , 2.045 , 6.457 , 2.824 , 1.057 , -12.167 , -5.935 , 10.421 , 5.995 , 2.144 , 5.344 , -11.987 , -4.824 , -11.339 , 13.456 , 0.903 , -0.422 , -1.871, 7.938 , 14.551 , 2.694 , 8.102 , -3.086 , 0.818 , -7.110 , -10.642 , 0.166 , -6.192 , 1.434 , -7.183 , 1.373 , 1.059 , -3.496 , -11.658 , -5.931 , -5.401 , -7.533 , -4.079 , 5.898 , 7.236 , 9.018 , 7.181 , 10.932 , 0.891 , 4.266 , 0.000 , -0.064 , -0.423 , -0.472 , 0.399 , 2.122 , -0.301 , 5.041 , -0.594 , -0.359 , -0.253 , 0.417 , -0.280 , -3.264 , -0.296 , 1.397 , -5.532 , 5.373 , 5.473 , -10.038 , -4.924 , -3.460 , -1.754 , -1.409 , 5.409 , -7.736 , -4.998 , -3.741 , -2.489 , -2.961 , -2.191 , 3.803 , 4.191 , 4.161 , 3.679 , 1.110 , 3.214 , 2.870 , 4.345 , 4.086 , 1.896 , 4.371 , 3.318 , 4.122 , 3.227 , 2.940 , 0.000 , -0.006 , -0.054 , 0.189 , -0.214 , -2.855 , 0.030 , -2.279 , -3.651 , 0.318 , -1.483 , 0.460 , 0.030 , -0.559 , 0.058 , 3.450 , 0.810 , -0.783 , -0.345 , 4.973 , 1.023 , 0.415 , 3.673 , 12.443 , 0.099 , 6.975 , -3.641 , 0.669 , 0.987 , 0.206 , 7.330 , -0.476 , -0.763 , -1.318 , 6.140 , -8.381 , -0.583 , -4.079 , 5.511 , -0.765 , 2.881 , -5.096 , -0.444 , -0.567 , -0.307 , 4.824 , 0.000);
  this.genderaxis = new Array(10.8622752381147,3.87784584606416,5.81610639589812,6.21443625253467,5.83704977209561,2.11678183662724,1.49714860432717,-1.43213334066785,-1.91706656439971,-3.72546660926233,-8.94743501326057,-7.44419476778238,-2.04255576084045,-6.47292434448537,-3.02146495825412,-0.417454129969832,-0.798845997309115,2.82525302328378,6.58162644614628,-0.148832074967619,-1.84484635406154,-4.12252915058675,-1.94274385563284,-0.179945745256845,-5.42786810376125,6.61359097522899,4.74160125623491,4.41358440819388,-5.65166311371472,-5.06421007401757,0.598322945574293,-0.820230066738596,-0.288438984967801,2.29854763807429,-1.63880607082610,2.49171588822723,3.18813757393736,-0.269932661912225,-4.07022663674413,-4.45065592489224,-2.26457871895647,-2.03545888478734,-4.61250609379555,-1.57025083258372,-3.33951608607358,-0.890102321103325,-0.402762082211773,-0.128556275080697,1.35165566708685,0.905946351327807,-1.34989771290742,-1.25864754217404,-0.488282114614113,-0.294928030194923,-0.283981468159997,-0.123537123697021,2.30011938880963,-0.232967075056555,-0.220699834686512,-1.35431666065644,-0.226201187974979,5.01816863098923,3.20435623460813,3.52937917607227,1.98043163108843,-0.915019105616344,3.57100598250043,1.63176896974632,-1.81143127934604,-0.162180926939796,-1.48626023336591,-2.60187027300432,-0.196709668879124,-1.71093187827240,-1.90568325360115,0.535403613052698,0.0901824012716346,0.0524919475696138,-1.36006446624041,-1.16319423900141,-3.51467872190662,1.50972693906794,1.51559887246235,2.38117514464405,0.0586190380116436,-1.65020885405940,-2.56877524386008,-0.681646248375902,1.79415406773476,2.55189796883159,0.798639246422816,0.0342073952011560,1.15488854259564,0.960084447169126,1.29851053128949,8.45024532563756,11.0933900174813,0.280595535064710,-13.1683484900773,-24.1008007959739,0.457009867183980,-0.479447515302096,-2.97465383332396,-4.05784844879388,1.05787157230132,3.59222567449265,4.15488552561069,3.00122757985203,0.995404541731690,1.33262098055273,-0.372571965865527,-0.340172974556166,0.784358902477489,-1.53464865930626,-4.07734571303003,-0.665648010096331,-1.09303601955504,-0.343578388044959,-0.251992564247704,-1.09242107685912,-0.369292142338945,-0.254006836131887,0.0620042041969407,0.0650215571538668,-1.70609335744371,-4.11258434681737,-2.63067838867320,1.53500379640007,5.26425082704958,0.0693151728968716,-0.0164941273287836,-0.331333382214125,-2.95744608658914,-2.13269659787131,0.152728151387196,2.28000378138170,0.495487888148287,0.348889753128268,0.860562851303457,-0.458459262279532,-0.237364049203899,-0.969514077111766,-0.359513799512138,-0.314487119618581,0.329331713056543,-0.976017531423067,-1.62704716356786,-1.47765225775260,2.13056938155009,1.83213270975978,-1.50885485909265,2.14432301974271,0.913484972312960,-0.206929440012976,-0.149737211730722,-0.160340393583336,0.144735532814098,0.456130276764025,-0.152337041262232,0.308872719191424,-0.219120951283475,-0.0853454544483000,-0.0609392086290274,1.54754814655687,0.384075693399170,-0.0712697028604292,-1.05717837191362,-0.427410775230718,-0.186397660789509,-0.154535028531196,-0.257416564945914,0.0430665402500267,1.00940635971217,-0.415781811762337,-0.243009913716927,-0.573726184448932,-0.161083943571017,-0.233021971341002,2.21418356717105,1.39459855774077,-0.258015432420134,1.69911202146683,0.719444880104572,0,0.759222556825001,0.355377914840419,0.350389579303012,-0.378836967820307,0.391484015256617,0.356800687145738,-0.472458438803077,1.71123777308700,-0.248022688099012,-0.343681089584835,1.36333479269400,-0.00688332913096112,-0.514873392435611,0.989338333784138,-0.473495990686217,0.214444962331612,0.0984704690342841,0.0932359735989069,1.09235313570833,0.601150889063367,0.0603905381227588,-1.58671583868713,-1.22579785374803,0.136425152562608,0.217264516198061,-0.224902540534402,0.696001935119537,0.197857676179030,0.334992043182422,-1.08244415827362,-0.766276468753209,-0.558612770425893,-0.644804949095056,-1.38639582091282,-1.83840514515086,-0.618216899068877,-2.09949848827496,-4.24165287036390,-0.802355169400983,-0.907789808909513,-1.47975979262350,-0.368112278367834,-0.853663038196210,-1.65467916345065,-0.309272020540577,0);
  //weightaxis = new Array(-3.557 , 2.058 , 2.420 , -10.008 , -7.623 , -7.510 , -24.112 , -7.792 , 2.740 , 5.952 , 10.814 , 10.674 , 17.714 , 1.244 , 5.862 , -7.616 , -1.018 , 8.418 , -11.658 , -5.197 , -2.763 , -0.619 , -9.047 , 7.603 , -8.826 , 10.007 , 1.939 , 6.282 , -3.122 , 10.368 , 1.781 , -11.934 , -11.726 , -2.454 , 5.448 , -6.645 , 6.250 , 2.032 , -11.780 , -7.404 , 0.448 , -5.697 , 2.954 , 0.856 , -2.735 , 13.654 , -6.567 , -3.571 , -4.603 , -0.382 , 1.474 , -7.039 , 0.256 , 2.609 , -4.767 , -0.089 , 4.732 , -6.406 , 0.968 , -6.673 , 3.225 , -0.076 , -0.607 , 2.168 , 38.654 , -5.442 , 3.680 , 3.617 , 12.533 , -3.403 , -38.677 , 17.927 , -4.637 , 5.863 , -0.425 , -13.285 , 0.039 , -0.288 , 0.537 , -1.235 , -4.787 , -2.121 , -2.216 , 6.308 , -1.002 , 2.732 , 5.603 , 1.593 , -1.087 , -0.264 , -0.121 , 0.000 , -4.396 , -3.167 , -2.400 , -4.737 , -4.983 , -4.954 , -5.458 , 1.244 , -2.600 , -3.242 , -3.807 , -4.775 , -5.236 , -4.885 , 5.260 , 1.088 , 0.141 , 0.876 , -18.270 , 3.705 , 1.955 , 3.608 , -6.450 , -0.799 , 15.084 , -3.502 , -0.582 , -2.683 , 0.707 , -3.005 , -0.003 , 0.083 , -0.139 , 4.619 , -0.339 , -0.203 , -0.121 , -2.270 , 0.476 , -5.171 , 0.491 , 0.466 , 1.279 , 0.062 , 0.340 , 0.000 , 0.035 , 0.240 , 0.290 , 2.460 , -1.018 , 0.007 , 0.297 , -0.826 , 0.201 , -2.670 , 0.269 , -0.021 , -1.144 , 0.004 , 1.632 , 0.776 , 2.459 , 3.238 , 1.500 , 4.525 , 1.249 , 3.572 , 4.333 , 3.233 , 1.634 , 3.092 , 1.095 , 2.336 , 1.372 , 4.268 , -5.578 , -5.599 , -5.686 , 2.285 , -6.114 , -5.892 , -6.169 , -4.326 , -5.740 , 1.651 , -4.788 , -5.954 , -5.803 , -5.780 , -4.806 , 0.000 , 0.518 , -0.026 , 0.150 , 3.305 , -2.629 , 0.117 , -3.694 , -0.920 , 0.180 , -2.527 , 2.535 , 0.421 , 3.360 , 0.256 , 2.341 , 0.718 , -0.967 , -0.894 , -0.733 , -0.241 , 0.776 , 0.865 , -5.980 , -0.904 , -3.065 , 2.567 , 0.443 , 1.788 , 0.405 , -11.257 , -2.877 , -2.897 , -3.019 , -2.356 , -1.131 , -2.707 , -2.212 , -3.531 , -2.662 , -2.191 , 0.754 , -2.783 , -1.390 , -2.829 , -4.388 , 0.000);
  this.weightaxis = new Array(6.97299621415639,1.72189688314990,4.00116806104000,6.10707274123270,3.81858132884442,-0.268416765573978,1.19214998023137,-0.830596370685391,-4.57464307666308,-5.04426464645415,-6.56087523630632,-2.13878290486604,-3.99386527580026,-2.95279544033096,2.30469965522041,0.829131576281622,-0.182465050390084,6.61301042155943,11.1400450072438,4.93783232364958,-2.82560234106618,-8.33929764276059,-8.25580531069052,-0.511583674572577,-1.77246842956280,6.56760262245357,4.45940951121577,0.0436265912901885,-7.01800497480072,-4.86461062728133,0.692777396324720,-0.429308290326574,-4.12915955958107,-2.76211480275548,-11.7896071567878,1.97710198238211,1.59189493710886,-5.27618624215229,2.01507106403492,1.25721587687820,1.89576722637022,-1.18718130634912,0.783762453557088,2.33077609970562,-2.08556421541997,1.65443384191452,-0.284177865890921,-0.307880945212011,0.741008473152660,1.80488758989290,2.79026223348795,-0.928768259893477,-1.09061224313465,-1.86103691062546,-0.474386266229603,-0.599027572240181,-0.131999401956304,0.287307917722563,-0.0670101495855125,0.00896927367605011,0.277842064987697,5.03204757475160,3.65611488637004,3.74984414564515,2.78460615160825,-0.128834597935228,3.87434216313824,2.07895540809584,-1.27081982875701,1.11409672852596,-0.286878928602604,-3.97100714031985,0.0946555345136001,-0.485276809173718,-4.02710006464691,0.0917992378488982,-0.406323590366951,-0.404436568602862,-1.46238291691054,-1.41132538297127,-1.91609284976068,0.711581580034461,0.690449727984842,0.730042780019879,-0.392225525368213,-1.70465215076560,-2.08840409082975,-0.925502314678826,1.00055700433652,1.61455261589967,0.00139385543398584,0.0249934715532956,0.915290991009979,0.799556948888455,-0.610419570674130,10.7297756435775,21.9610830606342,1.64270534537721,-15.3593083493078,-33.9400060368888,0.510977197718852,-1.42155882555786,-5.91704698638637,-6.60968547633760,2.00137305200595,6.69098691102027,6.55735122622332,3.07675133640677,0.676864489409231,0.617176162944806,0.241184064982093,-0.528538496724659,0.425653099211833,-0.0494603868862923,-1.61861506437554,-1.23132713775047,-2.15115853599750,-1.49437822980622,0.881092402991114,-2.05264183101797,-1.26084986399983,0.863316463762191,0.250113895409253,0.258765015460939,-1.62459210493689,-5.14253674874301,3.01590549974751,1.90501829186223,6.81016066940256,-3.02833164954041,0.211804449313463,-0.810766845345401,-2.30790729836272,0.304196739002919,0.815984400982323,1.20251493098481,-1.52319503135871,-0.110789323392909,0.874605033090273,-0.160399100764902,0.275322675735931,-0.373782504167636,-1.54314749717798,-0.00212464090842130,0.777815803148431,-1.70543570350152,-1.20710437614149,-1.06106243251343,1.28716440117744,1.36590612545544,-1.20085885270229,1.46782601577748,0.412124064768843,-0.209521780225730,-0.122381282694437,-0.103238913620229,-0.368438878891511,-0.00210197519969172,-0.143961470338356,0.948862574469089,-0.0194106356658378,0.00121465221571525,0.0186595049768949,2.88209809400605,-0.386749940868710,0.0141446576434566,-2.51566424628623,0.252685364554666,0.625608061336289,0.743788400484531,0.695324050091464,0.808476712546070,0.393887010232219,0.542160162587085,0.523135329385399,-0.291976975785362,0.757514863401118,0.658167319287741,1.70886684435368,0.435468190313219,0.646634119317645,1.50270206001917,0.211587284005638,0,0.174544483077777,-0.134541187224014,-0.493417437053271,-0.427870489583540,2.12312557729633,-0.158753020771751,-0.565257005236023,2.25514180645062,-0.284802375843194,-0.501006106450945,0.156942947954861,-0.333951860489493,-0.501310453505449,0.173273763931561,-1.32396054167176,0.0925107211063163,-0.0221514391649526,-0.0486762668096691,0.754014131012353,1.01536790259703,0.00524670730159950,-0.970218490451367,-1.15687373890217,0.0439259070790155,0.141920967761661,-1.55567463918627,0.318258726020781,0.00968710036689885,1.71054721032283,-0.502435202784555,-0.337853083008773,-0.214414103461054,-0.506198264461075,-2.48500922442769,-5.51162729496113,-0.350321585851870,-2.75329907294353,-6.91080614295055,-0.354864812038586,-0.339649036994719,-1.29883474308811,-0.951573661814865,-0.312504590429329,-1.56377712563378,-0.540502498785656,0);
  //nervousaxis = new Array(-2.287 , 2.908 , -16.651 , 5.744 , 14.554 , -33.851 , -20.618 , 9.088 , 25.190 , -19.420 , 9.773 , 27.284 , -6.213 , -2.409 , -2.146 , 4.020 , -1.084 , 3.827 , 29.288 , 29.115 , -16.231 , -10.515 , 12.662 , 0.258 , 31.078 , -7.317 , -9.473 , -40.609 , -12.230 , -6.967 , 12.955 , 39.596 , 38.175 , 8.914 , -31.218 , -28.038 , -39.623 , 14.060 , 40.087 , 0.767 , -14.678 , -17.046 , -6.624 , 6.314 , -6.487 , 37.435 , 4.840 , -1.573 , -2.283 , 4.341 , 13.433 , -3.273 , 1.866 , 0.639 , -2.534 , 7.995 , -3.446 , -2.084 , -13.153 , -2.749 , 2.835 , -2.930 , -3.446 , -4.662 , -29.192 , -10.719 , 4.237 , 7.290 , -20.091 , -2.371 , 20.000 , 8.858 , -9.948 , 3.162 , -2.977 , 22.105 , -0.843 , -0.815 , 0.602 , -10.290 , 8.431 , 0.328 , 4.564 , -7.348 , -2.205 , 8.903 , -5.180 , -4.243 , -4.616 , -0.797 , -3.384 , 0.000 , 3.143 , 2.198 , 1.778 , 6.803 , 1.117 , 4.080 , -5.675 , 5.129 , 1.673 , 7.182 , 6.798 , 4.107 , 3.658 , 3.637 , 2.433 , -2.698 , -4.001 , -3.555 , 17.976 , 66.514 , -0.269 , 33.184 , 4.939 , -4.625 , -25.991 , -23.518 , -4.901 , -11.346 , -2.794 , -11.076 , 1.433 , 1.510 , 2.955 , 1.983 , 14.310 , 1.577 , -5.809 , 5.433 , 0.024 , -0.233 , -5.113 , 1.855 , 3.111 , 1.495 , -1.437 , 0.000 , -1.292 , -1.089 , -1.282 , -0.954 , 0.120 , -0.445 , -0.658 , 0.057 , -1.321 , 3.068 , 2.974 , -0.881 , 3.162 , -0.750 , 1.399 , -2.486 , -0.341 , 1.460 , 16.072 , 4.979 , -3.699 , 1.362 , 12.895 , 0.774 , 0.454 , 6.029 , -3.401 , -1.118 , -3.024 , 5.399 , 0.837 , 1.328 , 1.213 , -1.793 , 17.039 , 1.779 , 6.626 , 0.916 , 1.067 , 3.723 , 8.428 , 1.527 , 0.936 , 1.160 , -0.359 , 0.000 , 0.981 , 0.385 , 0.352 , -4.928 , -6.175 , 0.786 , -2.188 , -3.641 , 0.442 , 2.902 , 3.946 , 1.048 , 2.034 , 0.922 , 2.114 , 5.139 , 6.255 , 5.356 , -11.575 , -4.892 , 6.041 , 0.654 , -3.698 , 6.280 , -20.902 , 2.919 , 7.282 , 7.308 , 6.329 , -6.835 , 5.397 , 5.082 , 5.311 , 3.978 , 3.084 , 4.996 , 7.487 , 2.356 , 5.127 , 3.372 , 9.868 , 5.948 , 9.372 , 4.924 , -0.740 , 0.000);
  this.nervousaxis = new Array(-1.06134214936967,-0.821038780608398,-2.27151441143312,-0.593565638449432,2.93529552325287,-1.33716107202864,-0.437799139056454,1.39315557637054,5.26045030868429,4.21640093162900,-1.83139690735865,-2.60311633252444,4.78972959062178,-2.94856705949575,-3.79651842329953,-3.16035238456531,-0.633096840842578,-5.50283759281812,-10.2053949458941,-6.01263603622674,1.31746628590561,7.43106534196106,8.40797620289240,1.43748507324748,-4.78735211536714,-0.303214042954494,-0.591358062801913,6.98135383509831,2.62513811978090,1.80628989415596,-0.391582099612247,0.859295572751745,4.26667817752415,2.19973363551719,5.33088905521230,0.978507802359325,-0.317106194857896,2.38175273947003,-1.43084572449385,-1.12452642346372,0.0202955321207460,1.42961536253810,-0.971063629103679,-0.234790139961677,1.09706478404349,-2.04592287630435,0.161702855898008,0.209873095989063,0.940042834774787,-1.58397405071598,-3.83484150818307,-0.430078424020539,0.658443935707803,2.02968185814469,0.258454171257769,0.628430175617600,1.22998245659434,-0.230167139816054,-0.187133032466676,-0.402476170628764,-0.209236375205972,-1.13095577617721,-1.22757881577091,-0.800697769751030,-1.51541133062348,-2.11525019149256,-0.969269039140664,-1.58021344552275,-1.69685082789706,-1.83699634496252,-1.54560566897040,1.57349794265142,-1.06462384896016,-1.54413498472799,2.03341480657565,-0.0779467754450322,0.719377177917966,0.695014435964701,0.414676470948341,0.409711570968704,-0.776132752416733,0.938287496835651,0.858069136413204,1.75426379612720,0.806852599236384,0.585877529786500,-0.223330045395666,0.0700935484862716,0.809545416976990,0.970059506373670,1.17377874486561,0.00984590751124198,-0.780097462456516,-1.04810847768246,0.704087338222903,1.57436002781137,0.239039937796580,-2.23618704170304,6.06536951548378,16.3461216527456,-1.20265850888108,-0.603438039103126,6.32204759639174,8.81922596392519,-1.29856947809224,-7.69724869483900,-9.57419732086183,-0.819813154535591,-0.284437229112271,-0.409318199878129,1.70113869450340,5.05726122947656,-0.244429584235525,-1.81752761389596,-1.76589979619772,0.0296233453962378,0.739665175028464,1.23198773950072,-1.40127326621171,0.508947546539532,0.679067128601969,-1.55619297358838,-0.278740636586653,-0.285283992920952,0.979473369184270,0.996158147665990,-1.96691001054940,-0.967916599142269,-2.48607673496535,3.49537067640558,-0.191282643176755,0.861337763251095,-0.685075913108261,-2.13236444185843,-0.873548506222734,1.25569996725071,2.46754745934566,0.639820846893045,0.412069649448423,0.423534356721506,0.350110040189503,0.104867610894097,0.113549767403305,0.684163582968230,-0.467117708008352,0.367934771152160,-0.169070194164941,-0.294958490296879,1.06796077407279,-0.0736841099809189,-0.223612101436305,0.930196456219768,0.0225392993780222,0.0293494433888838,0.103041864223317,0.0273325178448019,0.185191487891226,-0.249388169829512,0.135541941741626,-0.726810562638768,-0.00448783698646718,0.0874674133957658,0.0649640109035993,-1.80424820788310,1.32093043115957,0.0202687714972991,1.78958724266173,-0.846997007576950,-0.0925658270619998,-0.0788152875532167,0.124484552985266,0.724718214239617,1.36552917021726,0.00721605454420758,0.445223939572294,0.971962042890638,-0.108231672240419,-0.151360484766453,0.845591134862157,1.24514744498474,-0.0540587209079670,0.674744020690578,1.21411602274649,0,0.633830202852485,0.405687037937141,0.852870383609653,0.764746772553977,-0.234576842828537,0.564278646541937,0.818416908207558,-0.775399151379683,0.00519682937503137,0.111623813244096,1.20427831753507,0.539777610554792,0.0838125825043143,0.863264328171340,0.818817936756374,0.0343740129308371,0.0313595211945457,0.165167295995801,0.236881757879614,0.00875266908666569,-0.0306214205847926,-0.433490659394707,0.0549668810209340,0.117746913133204,0.133988087299825,1.26973946515426,-0.308799353710004,0.171112312636177,-1.38730189623652,0.00880229518182191,-1.62190698749134,-1.51648465762347,-1.54617869099541,-1.55634564987154,-1.23766082442805,-1.52348249597379,-0.161101969138227,2.06589224421612,-1.65251027593313,-1.71384324479092,-0.646686903029649,0.745340754628214,-1.69118759252628,-0.557633517711684,0.534529525418636,0);
  //happyaxis = new Array(-8.219 , -1.906 , -7.623 , 0.408 , -19.081 , 8.870 , 0.108 , -4.284 , 2.965 , 11.059 , 16.140 , -8.834 , 15.464 , -0.262 , 8.591 , -9.201 , -13.472 , -17.290 , 9.633 , 1.238 , 9.669 , 8.260 , 22.596 , -21.118 , 11.766 , 4.971 , 5.895 , -6.484 , 9.623 , -22.325 , 11.800 , -17.346 , -16.952 , 8.816 , 8.040 , 2.651 , 4.087 , -22.935 , -13.564 , 4.358 , 7.398 , 3.804 , 5.470 , -7.469 , -7.214 , -29.394 , 8.923 , -1.849 , -4.309 , -2.973 , -15.982 , 7.090 , -7.383 , -4.195 , -4.546 , -2.323 , -10.124 , 5.763 , 5.803 , 5.974 , -5.615 , -1.781 , -1.338 , -5.520 , -94.922 , 1.745 , -6.901 , -13.356 , -50.887 , 2.196 , 95.403 , 58.875 , 5.099 , 36.130 , -0.985 , 34.842 , 0.521 , 0.520 , 3.960 , 7.504 , 10.885 , 4.785 , 8.205 , -16.561 , -3.277 , -11.076 , 1.402 , -4.160 , -10.744 , 0.532 , 2.105 , 0.000 , -0.122 , -2.000 , -4.699 , -1.435 , -5.409 , -1.381 , -2.620 , -0.636 , -4.523 , -2.745 , -1.900 , -1.964 , -4.528 , -1.761 , -5.267 , -0.206 , 2.383 , 4.330 , 32.135 , -15.557 , 1.202 , -8.912 , 31.165 , -0.652 , -33.659 , 4.719 , -0.126 , 3.644 , 0.744 , -17.364 , -1.496 , -1.591 , 0.685 , -6.186 , -0.021 , 0.669 , 3.462 , 9.436 , -4.017 , -2.361 , -4.384 , -3.470 , -6.332 , -1.449 , -9.257 , 0.000 , 0.649 , 0.231 , 0.247 , 2.660 , 4.590 , 0.884 , 2.743 , 2.244 , 0.240 , -3.296 , -3.773 , 0.790 , 0.053 , 0.820 , -1.213 , -2.176 , -4.631 , -5.130 , 3.443 , -7.171 , -3.780 , -8.636 , -17.643 , -5.361 , 4.425 , -1.559 , -3.585 , -4.384 , -3.887 , -14.685 , 13.628 , 13.678 , 13.790 , -10.930 , 14.037 , 13.683 , 13.533 , 7.234 , 13.949 , -12.307 , 15.431 , 13.946 , 13.199 , 13.549 , 6.375 , 0.000 , 0.396 , 0.579 , 0.130 , -0.731 , -0.065 , 0.428 , 2.272 , -0.187 , 0.149 , 1.066 , -4.061 , -0.095 , -3.388 , 0.204 , -1.565 , 2.444 , -0.486 , -0.133 , -2.218 , 2.183 , 2.915 , 2.997 , 2.169 , -0.273 , 2.272 , -0.831 , 1.643 , 2.072 , 2.533 , 14.253 , 8.068 , 7.919 , 8.262 , 2.336 , 7.908 , 8.625 , 9.178 , 0.537 , 7.357 , -2.985 , 16.442 , 8.388 , 12.084 , 8.269 , 4.261 , 0.000);
  this.happyaxis = new Array(-8.67936588878631,-1.77470245537804,-1.18751015657594,6.94531965680805,10.7767496733696,-1.90863608921144,1.67467917928432,3.20536201187721,3.12533270877762,2.61261849183137,-4.40408148692059,-5.23105649562649,2.58653575344997,-1.20800067939035,-4.62463605802602,-0.613192839358591,-0.741563864405404,1.47532578154490,3.89770857479134,-2.03905002991520,-0.448578604871460,-0.109839026417164,2.13462820728521,-0.582811854290814,-1.82640460214104,0.119458894609563,0.0345706593499117,0.00425916244695979,-1.26633058986535,-1.61782978494722,-0.568278681079755,-2.82625700056293,0.270314906542053,2.58563758398263,10.7121390896010,0.972346341810508,0.550704806395093,6.10245595447436,-5.62467319375856,-5.30910999783367,-2.21484648216347,-0.280874288087182,-5.19620783902520,-1.14250039522565,-0.791796008367926,-1.50815351494611,0.280243807773588,0.496187765459352,0.682658795831437,-0.407039529668396,-4.94826636303926,0.417394532214768,-0.473791566501139,-2.54212574327376,0.261982014725729,0.256193496399709,1.46591872357010,-0.561498894466981,0.289352410237297,-1.33817904180304,-0.542686082537714,-1.86690856950223,-1.02534103859956,-1.30512185232508,0.133316981029901,2.19671163836645,-1.26706710580040,1.25068783029663,2.41501811225300,0.736731187615478,1.17510306702708,1.11641022479306,0.644805137455988,1.15833598873252,0.766701381601594,0.830401383345398,-0.618850515231332,-0.588419580626163,0.372098323371929,1.74903415556030,0.216440107212392,-1.55703797180938,-1.80342382028984,-3.30651842858017,-0.638301707562216,-0.670680807342366,-0.574103983515675,-1.22317042542935,-0.709367364153190,-1.13847960740569,0.592040216433788,-0.00787424872913969,0.712679450718906,0.890160487122128,0.601817534071266,-18.1349631868141,-39.0922711111479,0.578233237549983,10.6681635221294,24.8063534919807,1.20193476421449,2.55724620244024,9.04817727135562,11.4800542661616,-0.489614394420212,-7.92381489033509,-10.4566147846982,1.15116637958407,0.268155147759027,0.969303262017889,-3.54383876731072,-2.98100760728623,0.678614076192702,-3.22650752391888,-3.13092500577596,-0.0806332361694298,0.613690036686420,0.786451280806993,0.516630927723573,0.670424154710942,0.549160978108053,0.659271511943097,0.177183592781629,0.238430582486473,-1.27127365068321,-0.439829028177578,-15.1839676110333,1.20887758879446,0.888022234531706,10.1599175420777,0.230989862101136,1.45654936196586,-0.194073354355243,-1.62903404600603,-1.11752401560117,-1.21198478602807,1.21608129947165,0.434817467645872,0.0625422346396714,0.767766908270415,0.555920084952942,-0.784739218489201,0.971834560945984,0.468116248182157,0.875791124794872,1.11769327641794,0.722758040691246,0.788749585498572,1.03220856284935,-1.62897875904468,0.642378378192619,0.522689038128033,-1.82103744640400,0.0436260639640601,-0.0656473812323784,0.0797076832179325,-0.541428082138210,-0.155784015204422,-0.196164270152897,0.580045729777791,-0.360384153986323,-0.173895654939426,-0.162947959686220,-0.292990248566835,-0.174479854044395,-0.205110911127164,0.348717945763189,0.191679582122295,-1.30997464548692,-1.34588838862899,-1.51378451333720,-2.15008601135697,-0.983298879582978,-1.54143920698679,-2.37871093688983,-3.34630196042493,-1.29425179114999,-1.25312777899680,-0.601900447668386,0.422790145349287,-1.26464104134886,-1.38072558413636,0.400187519435249,0,0.126416027278664,0.179192426609648,0.175455783088409,-0.954181052745561,-3.72396436244391,0.114153460280855,-0.658244516509201,-1.21856020482756,0.0947023873735165,0.264872989950778,0.146230722951919,0.220576017536802,0.0359813578909282,-0.476828177024455,0.473305082814922,0.0990960881947890,0.117828822261742,-0.131561547525478,-0.106412717800651,-1.30759384210636,0.179265102163249,0.262159213746548,0.832194705999021,-0.0693396571401364,-0.0912643536816610,0.698248797365811,0.765485124817114,0.0860620755700431,-0.475323349010275,-0.542620052934527,-2.39800635222299,-2.30951983917581,-1.90438780086646,1.50915275065126,8.40709237300455,-2.16502170624317,-0.454413846581429,4.05325917758766,-2.20709435387091,-2.14689325778949,-0.614575206540114,0.200699436811318,-2.29906998148526,-0.444447683989184,-0.426738622889804,0);

  this.customaxis = new Array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
  //human specific iables
  this.walker_gender = 0;
  this.walker_weight = 0;
  this.walker_nervousness = 0;
  this.walker_happiness = 0;
  this.walker_customness = 0;

  //camera iables
  this.camera_azimuth = 0;
  this.camera_elevation = 0;
  this.camera_distance = 1000;
  this.camera_angvelocity = 0;
  this.walker_xaxis = 0;
  this.walker_yaxis = 1;
  this.walker_zaxis = 0;

  this.walker_rot_xaxis = 0;
  this.walker_rot_yaxis = 0;
  this.walker_rot_zaxis = 0;

  //general stuff
  this.walker_initphase = 0;
  this.walker_speed = 1;
  this.walker_sticks = true;

  this.walker_scrambling = 0;
  this.flicker_ontime = 100;
  this.flicker_duration = 1;
  this.flicker_randomness = 0;
  this.camera_perspective = 0;
  this.walker_scrambling_horiz = true;
  this.walker_scrambling_vert = true;
  this.walker_scrambling_phase = false;

  this.markers_invisible = null;

  //fun stuff
  this.walker_translation_speed = 0;

  //--------------INTERNAL IABLES--------------------
  this.curoffsetx = 0;
  this.curoffsety = 0;

  this.walkerxmin = 0;
  this.walkerymin = 0;
  this.walkerzmin = 0;
  this.walkerxmax = 0;
  this.walkerymax = 0;
  this.walkerzmax = 0;
  this.walkerxoff = 0;
  this.walkeryoff = 0;
  this.walkerzoff = 0;
  this.walkersizefactor = 0;

  this.axisrot = 0;
  this.nummarkers = 0;
  this.durationstd = 0;
  this.dotsonratio = 0;
  this.dotduration = 0;
  this.durationon = 0;
  this.durationoff = 0;

  //arrays of stuff
  this.scramblewalker = [];
  this.catwalker = [];
  this.pigeonwalker = [];
  this.walker_scrambling_phases = [];

  this.mddata;

  //flicker stuff
  this.dottime = [];
  this.dotstats = [];

  //marker stuff
  this.markers = [];
  this.markers_transformed = [];
}

Walker.prototype.constructor = Walker;

//use if changing default orientation
Walker.prototype.recalc_angle = function() {
  var res = angleBetween(this.walker_xaxis,this.walker_yaxis,this.walker_zaxis,0,1,0);
  this.walker_rot_xaxis = res[0];
  this.walker_rot_yaxis = res[1];
  this.walker_rot_zaxis = res[2];
  this.axisrot = res[3];
};

Walker.prototype.calcsize = function() {
  var n,m;
  if(this.mddata){
    var maxydiff = 0;
    for(n=0;n<this.mddata.length;n++)
    {
      var curminy = 9999;
      var curmaxy = -9999;
      for(m=0;m<this.mddata[n].length/3;m++)
      {
        this.walkerzmin = Math.min(this.walkerzmin,this.mddata[n][m*3+0]);
        this.walkerzmax = Math.max(this.walkerzmax,this.mddata[n][m*3+0]);
        this.walkerxmin = Math.min(this.walkerxmin,this.mddata[n][m*3+1]);
        this.walkerxmax = Math.max(this.walkerxmax,this.mddata[n][m*3+1]);
        this.walkerymin = Math.min(this.walkerymin,this.mddata[n][m*3+2]);
        this.walkerymax = Math.max(this.walkerymax,this.mddata[n][m*3+2]);

        curminy=Math.min(curminy, this.mddata[n][m*3+2]);
        curmaxy=Math.max(curmaxy, this.mddata[n][m*3+2]);
      }
      maxydiff = Math.max(maxydiff, curmaxy-curminy);
    }

    this.walkersizefactor = maxydiff;
    this.walkerxoff = 0;
    this.walkerzoff = 0;
    this.walkeryoff = -maxydiff/2;
    return;
  }
  else {
    for(n=0;n<this.nummarkers;n++) {
      this.walkerzmin = Math.min(this.walkerzmin,this.meanwalker[this.walker_object][n]);
      this.walkerzmax = Math.max(this.walkerzmax,this.meanwalker[this.walker_object][n]);
    }
    for(n=this.nummarkers;n<this.nummarkers*2;n++) {
      this.walkerxmin = Math.min(this.walkerxmin,this.meanwalker[this.walker_object][n]);
      this.walkerxmax = Math.max(this.walkerxmax,this.meanwalker[this.walker_object][n]);
    }
    for(n=this.nummarkers*2;n<this.nummarkers*3;n++){
      this.walkerymin = Math.min(this.walkerymin,this.meanwalker[this.walker_object][n]);
      this.walkerymax = Math.max(this.walkerymax,this.meanwalker[this.walker_object][n]);
    }
  }

  this.walkersizefactor = (this.walkerymax - this.walkerymin);  // The walker height in mm. Used later on to scale it to the desired size in degrees.

  this.walkerxoff = -(this.walkerxmax+this.walkerxmin)/2;
  this.walkeryoff = -(this.walkerymax+this.walkerymin)/2;
  this.walkerzoff = -(this.walkerzmax+this.walkerzmin)/2;
} // end of calsize()

Walker.prototype.init = function() {
  var n;
  this.recalc_angle();
  if(this.mddata){
    this.nummarkers = (this.mddata[0].length/3);
  }else{
    this.nummarkers = ((this.meanwalker[this.walker_object].length/5)-1)/3; // あーここですね。
  }
//  console.log('meanwalker.length: '+this.meanwalker[0].length +'\nnummarkers: '+this.nummarkers);

  this.walkerxmin = 9000;
  this.walkerxmax = -9000;
  this.walkerymin = 9000;
  this.walkerymax = -9000;
  this.walkerzmin = 9000;
  this.walkerzmax = -9000;

    //duplicate mean walker to fill scramble array (makes sure it's same size and such)
    this.scramblewalker = this.meanwalker[this.walker_object].slice(0);

    //setup arrays
    this.dottime = new Array(this.nummarkers);
    this.dotstats = new Array(this.nummarkers);
    this.markers = new Array(this.nummarkers*3);

    //setup invisible markers (all visible by default)
    if(this.markers_invisible == null){
      this.markers_invisible = new Array(this.nummarkers);
      for(n=0;n<this.nummarkers;n++)
        this.markers_invisible[i] = 0;
    }

    this.walker_scrambling_phases = new Array(this.nummarkers);

    this.calcsize();

    //random position if using left/right/top/bottom drawing area variables
    this.curoffsetx = this.offsetx+(Math.random()*(this.right-this.left)+this.left)*this.pixelsperdegree;
    this.curoffsety = this.offsety +(Math.random()*(this.bottom-this.top)+this.top)*this.pixelsperdegree;

    //dot flicker initialization stuff
    this.durationstd = this.flicker_randomness/100;
    this.dotsonratio = this.flicker_ontime/100.0;
    this.dotduration = this.flicker_duration;
    this.durationon = (this.dotsonratio) * this.flicker_duration;
    this.durationoff = (1-(this.dotsonratio)) * this.flicker_duration;



    for(n = 0;n<this.nummarkers;n++)
    {
      this.dotstats[n] = (Math.random() < this.dotsonratio);
      if(this.dotstats[n])
      {
        this.dottime[n] = Math.random() * (this.durationon)*1000;
      }else{
        this.dottime[n] = Math.random() * (this.durationoff)*1000;
      }
      var dot = {x: 0, y:0}
      this.dotShapes.push(dot);
    }

    //scramble stuff
    if(this.walker_scrambling_phase>0)
    {
      for(var i=0;i<this.nummarkers;i++)
      {
        this.walker_scrambling_phases[i] = (Math.random()*360*Math.PI/180) * (this.walker_scrambling_phase/100.0);
      }
    }else{
      for(i=0;i<this.nummarkers;i++)
      {
        this.walker_scrambling_phases[i] = 0;
      }
    }

    this.walker_translation_speed = this.calcTranslationSpeed();
    if(this.walker_scrambling>0){
      var scrambledegree = this.walker_scrambling/100;

      //first, we generate a random walker in a cylinder with radius of no more than 1
      for(i = 0;i<this.nummarkers;i++)
      {
        //Create random cylindrical coords
        var rad=Math.random();
        var theta=Math.random()*2*Math.PI;
        var cz=-1+2*Math.random();

        //Scramble markers within cylinder
        this.scramblewalker[i]=rad*Math.cos(theta);
        this.scramblewalker[this.nummarkers+i]=rad*Math.sin(theta);
        this.scramblewalker[this.nummarkers*2+i]=cz;
      }

      //this step is to take each original point, rescaled down to a size approx. the same as the random walker created above, then rotate them towards the scrambled dots by the amount 'scrambledegree'
      for(i = 0;i<this.nummarkers;i++)
      {
        //get this dot, offset it so 0 is the centre of the walker, and scale it down by the size of the walker (walker?max-walker?min/2) in each direction, yeilding a extreme of no more than 1 or -1, so it fits happily in the same shape as the scrambled walker
        var vector = new Array((this.meanwalker[this.walker_object][i+this.nummarkers]+this.walkerxoff)/((this.walkerxmax-this.walkerxmin)/2),(meanwalker[this.walker_object][i+this.nummarkers*2]+walkeryoff)/((this.walkerymax-this.walkerymin)/2),(this.meanwalker[this.walker_object][i]+this.walkerzoff)/((this.walkerzmax-this.walkerzmin)/2),0);
        //find the angle and axis of rotation between the current dot and its corresponding dot in the scrambled walker
        var res = angleBetween(vector[0],vector[1],vector[2],this.scramblewalker[i+this.nummarkers],this.scramblewalker[i+this.nummarkers*2],this.scramblewalker[i]);

        //rotate the dot around the axis of rotation, by the angle of difference multiplied by the scramble degree (so a scramble degree of 50% means it will rotate half way towards the point)
        vector = multmatrixvector(rotateaxis(scrambledegree*res[3],res[0],res[1],res[2]), vector);
        //find the distance of the original dot from the origin
        var leno = Math.sqrt(vector[0]*vector[0] + vector[1]*vector[1] + vector[2]*vector[2]);
        //find the distance of the scrambled dot from the origin
        var lens = Math.sqrt(this.scramblewalker[i+this.nummarkers]*this.scramblewalker[i+this.nummarkers]+(this.scramblewalker[i+this.nummarkers*2])*(this.scramblewalker[i+this.nummarkers*2])+this.scramblewalker[i]*this.scramblewalker[i]);
        //now figure out how far the new dot should be from the origin to happily interpolate between the two points
        //this is so that the dots will not only be rotated, by scaled in a manner proportional to the scrambledegree
        var mag = ((leno + (lens - leno) * scrambledegree) / leno);
        //rescale the dot's position
        this.scramblewalker[i] = vector[2] * mag;
        this.scramblewalker[i+this.nummarkers] = vector[0] * mag;
        this.scramblewalker[i+this.nummarkers*2] = vector[1] * mag;
      }

      //now before we rescale the walker back into about the same size as the original walker, we need to find the extremes of the scrambled walker
      var maxx = -9999;
      var maxy = -9999;
      var maxz = -9999;
      var minx = 9999;
      var miny = 9999;
      var minz = 9999;
      //find extreme edges of scrambled walker
      for(i=0;i<this.nummarkers;i++)
      {
        if(this.scramblewalker[i+this.nummarkers] > maxx)maxx = this.scramblewalker[i+this.nummarkers];
        if(this.scramblewalker[i+this.nummarkers*2] > maxy)maxy = this.scramblewalker[i+this.nummarkers*2];
        if(this.scramblewalker[i] > maxz)maxz = this.scramblewalker[i];
        if(this.scramblewalker[i+this.nummarkers] < minx)minx = this.scramblewalker[i+this.nummarkers];
        if(this.scramblewalker[i+this.nummarkers*2] < miny)miny = this.scramblewalker[i+this.nummarkers*2];
        if(this.scramblewalker[i] < minz)minz = this.scramblewalker[i];
      }

      //now we scale the newly scrambled walker to the same size as the original walker
      for(i=0;i<this.nummarkers;i++)
      {
        //each of these, for their dimension, scale the scrambled walker by the size of the original walker, divided by the size of the scrambled walker - then offsets back into the original space
        this.scramblewalker[i+this.nummarkers]    = (this.scramblewalker[i+this.nummarkers]) * ((this.walkerxmax-this.walkerxmin)/(maxx-minx)) - this.walkerxoff;
        this.scramblewalker[i+this.nummarkers*2]  = (this.scramblewalker[i+this.nummarkers*2]) * ((this.walkerymax-this.walkerymin)/(maxy-miny)) - this.walkeryoff;
        //this one is a little different - we want a fully scrambled walker to have a depth the same as the width the original walker, so that it fits not the original walker but a cylinder
        //so we stretch the depth to use based on scrambledegree - a low scrambled walker will use almost entirely the original DEPTH of the walker, while a 100% scrambled walker will scale entirely by the original WIDTH of the walker.
        this.scramblewalker[i]            = (this.scramblewalker[i]) * ((this.walkerzmax-this.walkerzmin)/(maxz-minz)) - this.walkerzoff; //>>>>>OLD CODE>>>>(this.scramblewalker[i]) * (((this.walkerxmax-this.walkerxmin)*scrambledegree + (1-scrambledegree)*(this.walkerzmax-this.walkerzmin))/(maxz-minz)) - this.walkerzoff; // use walkerxmax here so that we scramble in a square prism, not flattened in the direction of walking as it is if we use the meanwalker[this.walker_object]s ranges (it does not have legs outstretched).

        //offset to original location
        this.scramblewalker[i+this.nummarkers]    -= (minx * ((this.walkerxmax-this.walkerxmin)/(maxx-minx)) - this.walkerxoff) - this.walkerxmin;
        this.scramblewalker[i+this.nummarkers*2]  -= (miny * ((this.walkerymax-this.walkerymin)/(maxy-miny)) - this.walkeryoff) - this.walkerymin;
        this.scramblewalker[i]            -= (minz * ((this.walkerzmax-this.walkerzmin)/(maxz-minz)) - this.walkerzoff) - this.walkerzmin;
      }
    }
  }

  Walker.prototype.sampleMd = function(i, time)
  {
    var pos = Math.floor(((time*this.walker_speed)/1000)*120) % this.mddata.length;
    var dim = Math.floor(i/this.nummarkers);
    var marker = i%this.nummarkers;

    return this.mddata[pos][marker * 3 + dim];
  }

  Walker.prototype.sample = function(i, walkertime, includeStructure)
  {
    var phase = this.walker_scrambling_phases[i%this.nummarkers];
    //var genderval = this.walker_gender / this.walker_gender_stddev;
    var genderval = this.walker_gender;

    var initialpos = this.meanwalker[this.walker_object][i];

    if(includeStructure){
      if(this.walker_object == 0)
      {
        initialpos += this.genderaxis[i]*genderval + this.weightaxis[i]*this.walker_weight + this.nervousaxis[i]*(this.walker_nervousness) + this.happyaxis[i]*this.walker_happiness + this.customaxis[i]*this.walker_customness;
      }

      if(this.walker_scrambling>0)
      {
        if(((i>this.nummarkers*2)&&(this.walker_scrambling_vert)) || ((i<this.nummarkers*2)&&(walker_scrambling_horiz)))
          initialpos = this.scramblewalker[i];
      }

      //invert or scale structure
      if((i>=this.nummarkers*2)&&(i<this.nummarkers*3))
        initialpos *= this.structure_vertical_scale;
      else
        initialpos *= this.structure_horizontal_scale;
    }else{
      initialpos = 0;
    }

    //motion!
    var motionpos = 0;
    if(this.walker_object == 0) //if it's human, add in all the human axes
    {
      motionpos =
      (this.meanwalker[this.walker_object][i+(this.nummarkers*3+1)]+this.genderaxis[i+(this.nummarkers*3+1)]*genderval+this.weightaxis[i+(this.nummarkers*3+1)]*this.walker_weight+this.nervousaxis[i+(this.nummarkers*3+1)]*(this.walker_nervousness)+this.happyaxis[i+(this.nummarkers*3+1)]*this.walker_happiness+this.customaxis[i+(this.nummarkers*3+1)]*this.walker_customness)*Math.sin(walkertime + phase + this.walker_initphase*Math.PI/180) +
      (this.meanwalker[this.walker_object][i+(this.nummarkers*3+1)*2]+this.genderaxis[i+(this.nummarkers*3+1)*2]*genderval+this.weightaxis[i+(this.nummarkers*3+1)*2]*this.walker_weight+this.nervousaxis[i+(this.nummarkers*3+1)*2]*(this.walker_nervousness)+this.happyaxis[i+(this.nummarkers*3+1)*2]*this.walker_happiness+this.customaxis[i+(this.nummarkers*3+1)*2]*this.walker_customness)*Math.cos(walkertime + phase + this.walker_initphase*Math.PI/180) +
      (this.meanwalker[this.walker_object][i+(this.nummarkers*3+1)*3]+this.genderaxis[i+(this.nummarkers*3+1)*3]*genderval+this.weightaxis[i+(this.nummarkers*3+1)*3]*this.walker_weight+this.nervousaxis[i+(this.nummarkers*3+1)*3]*(this.walker_nervousness)+this.happyaxis[i+(this.nummarkers*3+1)*3]*this.walker_happiness+this.customaxis[i+(this.nummarkers*3+1)*3]*this.walker_customness)*Math.sin(2*(walkertime + phase + this.walker_initphase*Math.PI/180)) +
      (this.meanwalker[this.walker_object][i+(this.nummarkers*3+1)*4]+this.genderaxis[i+(this.nummarkers*3+1)*4]*genderval+this.weightaxis[i+(this.nummarkers*3+1)*4]*this.walker_weight+this.nervousaxis[i+(this.nummarkers*3+1)*4]*(this.walker_nervousness)+this.happyaxis[i+(this.nummarkers*3+1)*4]*this.walker_happiness+this.customaxis[i+(this.nummarkers*3+1)*4]*this.walker_customness)*Math.cos(2*(walkertime + phase + this.walker_initphase*Math.PI/180));
    }else{
      motionpos = (this.meanwalker[this.walker_object][i+(this.nummarkers*3+1)])*Math.sin(walkertime + phase + this.walker_initphase*Math.PI/180) + (this.meanwalker[this.walker_object][i+(this.nummarkers*3+1)*2])*Math.cos(walkertime + phase + this.walker_initphase*Math.PI/180) + (this.meanwalker[this.walker_object][i+(this.nummarkers*3+1)*3])*Math.sin(2*(walkertime + phase + this.walker_initphase*Math.PI/180)) + (this.meanwalker[this.walker_object][i+(this.nummarkers*3+1)*4])*Math.cos(2*(walkertime + phase + this.walker_initphase*Math.PI/180));
    }
    // 似たような処理ですね
    if((i>=this.nummarkers*2)&&(i<this.nummarkers*3))
      motionpos *= this.motion_vertical_scale;
    else
      motionpos *= this.motion_horizontal_scale;
    return initialpos + motionpos;
  }

  Walker.prototype.getFrequency = function()
  {

    var speed = this.meanwalker[this.walker_object][this.nummarkers*3];
    if(this.walker_object == 0)
    {
      speed += this.walker_gender * this.genderaxis[this.nummarkers*3];
      speed += this.walker_weight * this.weightaxis[this.nummarkers*3];
      speed += this.walker_nervousness * this.nervousaxis[this.nummarkers*3];
      speed += this.walker_happiness * this.happyaxis[this.nummarkers*3];
    }
    return speed / this.walker_speed;
  }
  // 似たような処理だ
  Walker.prototype.calcTranslationSpeed = function()
  {
    var tspeed = this.meanwalker[this.walker_object][(this.nummarkers*3+1)*3-1];
    if(this.walker_object == 0)
    {
      tspeed += this.walker_gender * this.genderaxis[(this.nummarkers*3+1)*3-1];
      tspeed += this.walker_weight * this.weightaxis[(this.nummarkers*3+1)*3-1];
      tspeed += this.walker_nervousness * this.nervousaxis[(this.nummarkers*3+1)*3-1];
      tspeed += this.walker_happiness * this.happyaxis[(this.nummarkers*3+1)*3-1];
    }
    return tspeed*120;
  }

  Walker.prototype.getTranslationSpeed = function()
  {
    return this.walker_speed * (this.walker_translation_speed/120);
  }

  Walker.prototype.calcTime = function(curtime)
  {
    /*var speed = this.meanwalker[this.walker_object][this.nummarkers*3];
    if(this.walker_object == 0)
    {
      speed += this.walker_gender * this.genderaxis[this.walker_object][this.nummarkers*3];
      speed += this.walker_weight * this.weightaxis[this.walker_object][this.nummarkers*3];
      speed += this.walker_nervousness * this.nervousaxis[this.walker_object][this.nummarkers*3];
      speed += this.walker_happiness * this.happyaxis[this.walker_object][this.nummarkers*3];
    }*/
    //return (curtime / 159.1549)*(120/(this.meanwalker[this.walker_object][this.nummarkers*3]/this.walker_speed))
    //return (curtime / 159.1549)*(120/(this.getFrequency()));
    return (curtime / 159.1549)*(120/(this.getFrequency()));
  }

  //function that draws walker
  Walker.prototype.drawWalker = function(curtime)
  {

    var invis = new Array(this.nummarkers);
    var n;
    var i;
    for(n=0;n<this.nummarkers;n++)
    {
      while(curtime > this.dottime[n])
      {
        if(this.dotstats[n]>0){
          this.dotstats[n] = 0;
        }else{
          this.dotstats[n] = 1;
        }
        var changeval=0;

        if((this.durationon==0)&&(this.durationoff==0)){
          this.dotstats[n] = 1;
          this.dottime[n] = curtime;
          break;
        }
        if(this.dotstats[n] == 1){
          changeval = randn()*this.durationstd;
          if(changeval < -0.995)changeval = -0.995;
          if(changeval > 0.995)changeval = 0.995;
          this.dottime[n] = this.dottime[n] + (this.durationon)*1000 + changeval*this.durationon*1000;
        }else{
          changeval = randn()*this.durationstd;
          if(changeval < -0.995)changeval = -0.995;
          if(changeval > 0.995)changeval = 0.995;
          this.dottime[n] = this.dottime[n] + (this.durationoff)*1000 + changeval*this.durationoff*1000;
        }
      }
    }

    var walkertime = 0;
    if(this.walker_speed != 0){
      walkertime = this.calcTime(curtime);//(curtime / 159.1549)*(120/(this.meanwalker[this.walker_object][this.nummarkers*3]/this.walker_speed));
    }

    if(this.mddata)
    {
      walkertime = curtime;
    }

    //translation calculation
    if((this.translation)&&(this.walker_object==0))
    {
      this.translation_pos = Math.round( (this.getTranslationSpeed()*120) * curtime/1000 );
      this.translation_pos = this.translation_pos % (this.translation_end - this.translation_start) + this.translation_start;
    }else{
      this.translation_pos = 0;
    }

    //CALCULATE MARKER POSITIONS
    for (i = 0; i<this.nummarkers*3+1;i++) {
      if(this.mddata){
        this.markers[i] = this.sampleMd(i,walkertime);
      }else{
        this.markers[i] = this.sample(i,walkertime, true);
      }
    }

    //draw walker, rotating by azimuth, axisrot, elevation and spinmatrix
    var matrix = rotateaxis(-this.axisrot,this.walker_rot_xaxis,this.walker_rot_yaxis,this.walker_rot_zaxis);

    matrix = multmatrix(translate(0,0,this.translation_pos), matrix);
    matrix = multmatrix(rotateaxis(this.camera_azimuth*Math.PI/180+(((curtime)*this.camera_angvelocity*Math.PI/180)/1000),0,1,0), matrix);

    //console.log(matrix);
    matrix = multmatrix(this.spinmatrix, matrix);
    matrix = multmatrix(rotateX((this.camera_elevation)*Math.PI/180),matrix);

    var vectors = new Array(this.nummarkers);
    var vector = new Array(4);
    var v2 = new Array(4);
    var v3 = new Array(4);
    var yoffset = this.walkeryoff;
    var zoffset = this.walkerzoff;
    var xoffset = this.walkerxoff;

    for (i = 0; i < this.nummarkers; i++) {

      if(this.dotstats[i]){
        invis[i] = 0;
      }else{
        invis[i] = 1;
      }

      vector[0] = this.markers[i+this.nummarkers]+xoffset + this.data_offset_x;
      vector[1] = this.markers[i+this.nummarkers*2]+yoffset*this.structure_vertical_scale + this.data_offset_y;
      vector[2] = this.markers[i]+zoffset + this.data_offset_z;
      vector[3] = 1;
      v2 = multmatrixvector(matrix, vector);



      v2[2] -= this.camera_distance;
      v2[3] = 1;

      if(this.camera_perspective>0)
      {
        var persp = perspective(this.camera_distance);
        v3 = multmatrixvector(persp,v2);
        v3[0] = v3[0]/v3[3];
        v3[1] = v3[1]/v3[3];
        v3[2] = v3[2]/v3[3];

        if((v2[2]>0)||(v3[3]==0)){
          invis[i]=1;
        }
      }else{
        v3 = v2;
      }


      //nudge up
      var xpos = this.curoffsetx+(v3[0]/this.walkersizefactor)*this.walker_size*this.pixelsperdegree;
      var ypos = this.curoffsety-(v3[1]/this.walkersizefactor)*this.walker_size*this.pixelsperdegree;
      vectors[i] = v3;

      if(this.markers_invisible[i])
      {
        invis[i] = 1;
      }

      if(!invis[i])
      {
        this.drawDot(xpos,ypos);
        this.dotShapes[i].x = xpos;
        this.dotShapes[i].y = ypos;
      }

    }

    this.markers_transformed = vectors;

    if(this.sticks_force_visible){
      for(i=0;i<invis.length;i++)
      {
        invis[i] = 0;
      }
    }

    if(this.walker_sticks)
    {
      if(this.walker_object == 0)
      {
        this.drawLineX(vectors,0,1,invis);
        this.drawLineX(vectors,1,2,invis);
        this.drawLineX(vectors,2,3,invis);
        this.drawLineX(vectors,3,4,invis);

        this.drawLineX(vectors,1,5,invis);
        this.drawLineX(vectors,5,6,invis);
        this.drawLineX(vectors,6,7,invis);

        this.drawLineX(vectors,1,8,invis);
        this.drawLineX(vectors,8,9,invis);
        this.drawLineX(vectors,9,10,invis);
        this.drawLineX(vectors,10,11,invis);

        this.drawLineX(vectors,8,12,invis);
        this.drawLineX(vectors,12,13,invis);
        this.drawLineX(vectors,13,14,invis);
      }

    }// temporary
    // あれ？これcatとかpigeonの場合じゃない？？これ使えばいけるんじゃない？？
    // あー、でも他のデータないからなぁ。。

    //   if(this.walker_object == 1)
    //   {
    //     //legs
    //     this.drawLineX(vectors,0,1,invis);
    //     this.drawLineX(vectors,1,2,invis);

    //     this.drawLineX(vectors,15,16,invis);
    //     this.drawLineX(vectors,16,17,invis);

    //     this.drawLineX(vectors,12,13,invis);
    //     this.drawLineX(vectors,13,14,invis);

    //     this.drawLineX(vectors,5,6,invis);
    //     this.drawLineX(vectors,6,7,invis);


    //     this.drawLineX(vectors,11,8,invis);
    //     this.drawLineX(vectors,8,10,invis);
    //     this.drawLineX(vectors,9,3,invis);
    //     this.drawLineX(vectors,3,4,invis);
    //     this.drawLineX(vectors,4,10,invis);
    //   }
    //   if(this.walker_object == 2)
    //   {
    //     //head
    //     this.drawLineX(vectors,0,1,invis);
    //     this.drawLineX(vectors,1,2,invis);
    //     this.drawLineX(vectors,2,0,invis);

    //     this.drawLineX(vectors,3,4,invis);
    //     this.drawLineX(vectors,4,5,invis);
    //     this.drawLineX(vectors,5,6,invis);
    //     this.drawLineX(vectors,6,3,invis);

    //     this.drawLineX(vectors,7,8,invis);
    //     this.drawLineX(vectors,9,10,invis);
    //   }
    //   if(this.walker_object == 3)
    //   {
    //     this.drawLineX(vectors,0,1,invis);
    //     this.drawLineX(vectors,1,2,invis);
    //     this.drawLineX(vectors,2,3,invis);
    //     this.drawLineX(vectors,3,0,invis);
    //     this.drawLineX(vectors,4,5,invis);
    //     this.drawLineX(vectors,5,6,invis);
    //     this.drawLineX(vectors,6,7,invis);
    //     this.drawLineX(vectors,7,4,invis);
    //     this.drawLineX(vectors,0,4,invis);
    //     this.drawLineX(vectors,1,5,invis);
    //     this.drawLineX(vectors,2,6,invis);
    //     this.drawLineX(vectors,3,7,invis);
    //   }
    // }
  }

  Walker.prototype.drawDot = function(x,y)
  {
    this.ctx.fillStyle = this.walker_colour;
    this.ctx.beginPath();
    this.ctx.arc(x, y, 3, 0, 2 * Math.PI);
    this.ctx.fill();
    this.ctx.closePath();
  }


  Walker.prototype.drawLineX = function(vectors, from, to, perspinvis)
  {
    if((perspinvis[from] == 0) && (perspinvis[to]==0))
    {
      var moveX = (this.curoffsetx+(vectors[from][0]/this.walkersizefactor)*this.walker_size*this.pixelsperdegree);
      var moveY = (this.curoffsety-(vectors[from][1]/this.walkersizefactor)*this.walker_size*this.pixelsperdegree);
      var lineX = (this.curoffsetx+(vectors[to][0]/this.walkersizefactor)*this.walker_size*this.pixelsperdegree);
      var lineY = (this.curoffsety-(vectors[to][1]/this.walkersizefactor)*this.walker_size*this.pixelsperdegree);

      this.ctx.strokeStyle = this.walker_colour;
      this.ctx.beginPath();
      this.ctx.moveTo(moveX,moveY);
      this.ctx.lineTo(lineX,lineY);

      this.ctx.stroke();
      this.ctx.closePath();
    }
  }


//found this somewhere on the internet
Walker.prototype.drawCircle = function(radius, x, y) {
   // The angle of each of the eight segments is 45 degrees (360 divided by 8), which
   // equals p/4 radians.
   var angleDelta = Math.PI / 4;

 // Find the distance from the circle's center to the control points for the curves.
 var ctrlDist = radius/Math.cos(angleDelta/2);

 // Initialize the angle to 0 and define local variables that are used for the
   // control and ending points.
   var angle = 0;
   var rx, ry, ax, ay;

 // Move to the starting point, one radius to the right of the circle's center.
 this.linecanvas.graphics.moveTo(x + radius, y);

 // Repeat eight times to create eight segments.
 for (var i = 0; i < 8; i++) {

 // Increment the angle by angleDelta (p/4) to create the whole circle (2p).
 angle += angleDelta;

 // The control points are derived using sine and cosine.
 rx = x + Math.cos(angle-(angleDelta/2))*(ctrlDist);
 ry = y + Math.sin(angle-(angleDelta/2))*(ctrlDist);

 // The anchor points (end points of the curve) can be found similarly to the
   // control points.
   ax = x + Math.cos(angle)*radius;
   ay = y + Math.sin(angle)*radius;

 // Draw the segment.
 this.linecanvas.graphics.curveTo(rx, ry, ax, ay);
}
}
